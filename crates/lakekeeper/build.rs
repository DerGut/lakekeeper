// generated by `sqlx migrate build-script`
fn main() {
    // SQLX_OFFLINE_DIR is set via rustc_env in BUILD.bazel for Bazel builds
    // For Cargo builds, it should be set in the environment or use the default

    // Debug: Print current directory and test various sqlx paths
    if let Ok(cwd) = std::env::current_dir() {
        println!("cargo:warning=BUILD SCRIPT CWD: {}", cwd.display());
    }

    // Check SQLX_OFFLINE_DIR environment variable
    if let Ok(sqlx_dir) = std::env::var("SQLX_OFFLINE_DIR") {
        println!("cargo:warning=SQLX_OFFLINE_DIR env var: {}", sqlx_dir);
        println!("cargo:warning=SQLX_OFFLINE_DIR exists: {}", std::path::Path::new(&sqlx_dir).exists());
    } else {
        println!("cargo:warning=SQLX_OFFLINE_DIR env var not set");
    }

    // Test various possible paths
    let test_paths = [
        ".tmp_git_root/crates/lakekeeper/sqlx_metadata",
        "sqlx_metadata",
        ".sqlx",
        "../../sqlx_metadata",
    ];

    for path in &test_paths {
        let exists = std::path::Path::new(path).exists();
        println!("cargo:warning=Path '{}' exists: {}", path, exists);
        if exists {
            if let Ok(abs_path) = std::fs::canonicalize(path) {
                println!("cargo:warning=  -> Absolute: {}", abs_path.display());
            }
        }
    }

    // trigger recompilation when a new migration is added
    println!("cargo:rerun-if-changed=migrations");
}
